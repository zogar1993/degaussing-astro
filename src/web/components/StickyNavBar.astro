---
import getLocalizedLinkToComicStrip from "@server/actions/GetLocalizedLinkToComicStrip"
import getStripNameParts from "@server/actions/GetStripNameParts"
import { getLangFromUrl, useTranslations } from "@server/i18n/utils"
import type { RelatedPages } from "@server/Utils"

const language = getLangFromUrl(Astro.url)
const t = useTranslations(language)

export interface Props {
	info: RelatedPages
}
const { info: { current, backward, forward } } = Astro.props
---
<nav class="sticky-bar" aria-label={t("landmarks.navigation-comic")}>
	<div class="navigation-arrows">
		{
			backward ?
				<a
					class="link"
					href={getLocalizedLinkToComicStrip({ ...backward.all, language })}
					aria-label={t("secondary-nav.first")}
					title={t("secondary-nav.first")}
				>
					&lt;&lt;
				</a>
				<a
					class="link"
					href={getLocalizedLinkToComicStrip({ ...backward.one, language })}
					aria-label={t("secondary-nav.previous")}
					title={t("secondary-nav.previous")}
				>
					&lt;
				</a>
				:
				<span class="link disabled" aria-hidden="true">&lt;&lt;</span>
				<span class="link disabled" aria-hidden="true">&lt;</span>

		}
	</div>
	<span class="text hide-on-mobile">
			{getStripNameParts({ ...current, language }).join(" | ")}
	</span>
	<div class="navigation-arrows">
		{
			forward ?
				<a
					class="link"
					href={getLocalizedLinkToComicStrip({ ...forward.one, language })}
					aria-label={t("secondary-nav.next")}
					title={t("secondary-nav.next")}
				>
					&gt;
				</a>
				<a
					class="link"
					href={getLocalizedLinkToComicStrip({ ...forward.all, language })}
					aria-label={t("secondary-nav.last")}
					title={t("secondary-nav.last")}
				>
					&gt;&gt;
				</a>
				:
				<span class="link disabled" aria-hidden="true">&gt;</span>
				<span class="link disabled" aria-hidden="true">&gt;&gt;</span>

		}
	</div>
</nav>
<style>
    @media (width <= 36em) {
        .hide-on-mobile {
            display: none;
        }
    }

    .sticky-bar {
        grid-column: left;
        grid-row: sticky-nav-bar;

        position: sticky;

        display: flex;
        justify-content: space-between;
        align-items: center;

        margin-inline: calc(5.5rem + var(--border-wide-width));
        justify-self: stretch;
        height: 3.75rem;


        background-color: var(--navigation_background-color);
        border: 1px solid #000000;
        box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.25);
        border-radius: 10px;

        padding: 0 4.5rem;

        font-family: var(--heading_font-family);
        font-style: normal;
        font-weight: 400;
        font-size: 2rem;

        color: var(--sticky-navbar__text_color);
        bottom: .75rem;
    }

    .navigation-arrows {
        display: flex;
        gap: 1.5rem;
    }

    .text {
    	font-size: 1.75rem;
    }

    .link {
        display: flex;
        justify-content: center;

        color: var(--link_color);
        font-size: 2.5rem;
        min-width: 2.25rem;

        transition: var(--link--hover_transition-timing);
        transition-property: color;
    }

    a.link:hover {
        color: var(--link--hover_color);
    }

    .link.disabled {
        pointer-events: none;
        color: var(--sticky-navbar__link--disabled_color);
    }

    @media (max-width: 72em) {
        .sticky-bar {
            position: static;
            /* TODO move border widths to variables, 2px is the difference between border sizes */
            padding: calc(1rem + 2px) 1rem;
            margin-inline: 0;
            box-shadow: none;
        }

        .navigation-arrows {
            gap: .5rem;
        }

        .text {
            font-size: 1.5rem;
        }

        .link {
            color: var(--link_color);
            font-size: 2rem;
        }
    }
</style>
