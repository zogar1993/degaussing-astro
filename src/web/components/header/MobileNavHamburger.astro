---
import getMenuItems from "@server/actions/GetMenuItems"
import { getLangFromUrl, useTranslations } from "@server/i18n/utils"

const language = getLangFromUrl(Astro.url);
const t = useTranslations(language);

const items = getMenuItems({ path: Astro.url.pathname, language })
---
<nav aria-label={t("interaction.main-menu")}>
	<button
		id="hamburger-opener"
		aria-expanded="false"
		aria-controls="hamburger-dropdown"
		aria-label={t("interaction.open")}
	>
		<img src="/icons/hamburger.svg" alt="" />
	</button>
	<dialog id="hamburger-dropdown" role="menu" inert>
		<button id="hamburger-closer" aria-label={t("interaction.close")} title={t("interaction.close")}>
			<img src="/icons/close.svg" alt="" />
		</button>
		<ul>
			{items.map(item =>
				<li>
					<a href={item.href} class={item.selected ? "selected" : ""}>
						<img src={item.icon} alt="" />
						<span>{item.text}</span>
					</a>
				</li>
			)}
		</ul>
	</dialog>
</nav>
<script>
	const content = document.querySelector("#content-container")
	const opener = document.querySelector("#hamburger-opener")
	const closer = document.querySelector("#hamburger-closer")
	const dialog = document.querySelector("dialog")

	opener.addEventListener("click", () => {
		content.setAttribute("aria-hidden", "true")
		dialog.removeAttribute("inert")
		opener.setAttribute("aria-expanded", "true")

		dialog.showModal()
	})

	closer.addEventListener("click", () => {
		dialog.close()
	})

	dialog.addEventListener("close", () => {
		content.removeAttribute("aria-hidden")
		dialog.setAttribute("inert", "")
		opener.setAttribute("aria-expanded", "false")
	})
</script>
<style>
    nav {
        display: none;
        flex-direction: column;

        position: absolute;
        left: 0;
        top: 0;

        border-bottom-right-radius: var(--component_border-radius);
    }

    dialog[open] {
        top: 0;
    }

    dialog:not([open]) {
        top: -100vh;
    }

    #hamburger-dropdown {
        display: flex;
        position: absolute;
        background-color: var(--navigation_background-color);

        width: 100vw;
        height: 100vh;

        z-index: 50;
        transition: 0.50s ease-in-out;

        overflow-y: auto;
    }

    ul {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        padding-top: 6rem;
        padding-left: 2rem;

    }

    #hamburger-opener {
        padding: 1rem;
    }

    #hamburger-closer {
        position: absolute;
        top: .5rem;
        right: .5rem;

        padding: 16px;
    }

    li > a {
        color: var(--link_color);
        font-family: var(--heading_font-family);
        font-size: 1.25rem;
        display: flex;
        gap: 1rem;
        align-items: center;

        padding: 1rem;
    }

    li > a.selected {
        color: var(--header__link--selected_color);
    }

    li > a.selected > img {
        filter: var(--filter-image-hover);
    }

    img {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 1.5rem;
        width: 1.5rem;
    }

    @media (max-width: 72em) {
        nav {
            display: flex;
        }
    }

    body:has(dialog[open]) {
        overflow-y: hidden;
    }
</style>
