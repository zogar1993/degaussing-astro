<script type="module" src="https://cdn.jsdelivr.net/npm/@friendlycaptcha/sdk@0.1.20/site.min.js" async defer></script>
<script nomodule src="https://cdn.jsdelivr.net/npm/@friendlycaptcha/sdk@0.1.20/site.compat.min.js" async defer></script>
<script>
	const section = document.getElementById("newsletter")
	const messageSuccess = document.getElementById("newsletter__success-message")
	const messageError = document.getElementById("newsletter__error-message")
	const formContainer = document.getElementById("newsletter__form-container")
	const form = document.getElementById("newsletter__form")
	const input = document.getElementById("newsletter__input")
	const button = document.getElementById("newsletter__button")
	const widget = section.querySelector(".frc-captcha")
	/*
		const formObserver = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					const script = document.createElement("script")
					script.src = "https://www.google.com/recaptcha/api.js?onload=onRecaptchaLoad"
					script.async = true
					script.onerror = () => {
						section.setAttribute("aria-busy", "false")
						messageError.hidden = false
					}
					document.head.appendChild(script)
					formObserver.unobserve(section)
				}
			})
		})

		formObserver.observe(section)
	*/

	widget.addEventListener("frc:widget.complete", async function() {
		const isEmailInputInvalid = () => !(input.value.length > 0 && input.checkValidity())
		const applyEmailInputValidity = () => button.disabled = isEmailInputInvalid()
		input.addEventListener("input", applyEmailInputValidity)
		applyEmailInputValidity()
		/*
			event.preventDefault()

			const result = await fetch("/api/validate_captcha", {
				body: JSON.stringify({ solution: event.detail.response }),
				headers: { "Content-Type": "application/json" },
				method: "POST"
			})

			if (result.status === 204) {
				button.disabled = false
				formContainer.hidden = false
				section.setAttribute("aria-busy", "false")
			} else {
				return new Response(await result.text(), {
					status: 500,
					headers: {
						"Content-Type": "application/json"
					}
				})
			}

		 */
	})

	form.onsubmit = async (e) => {
		e.preventDefault()

		const data = new FormData(form)
		data.append("language", document.documentElement.lang)

		section.setAttribute("aria-busy", "true")
		formContainer.hidden = true

		const result = await fetch("/api/subscribe", {
			body: data,
			method: "POST"
		})

		if (result.status === 204)
			messageSuccess.hidden = false
		else
			messageError.hidden = false

		section.setAttribute("aria-busy", "false")
	}
</script>