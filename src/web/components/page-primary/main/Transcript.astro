---
import { getLangFromUrl, useTranslations } from "@server/i18n/utils"
import type { PageInfo } from "@transport/PageInfo"
import { ID } from "@web/ID"

const language = getLangFromUrl(Astro.url)
const t = useTranslations(language)

const { info } = Astro.props as { info: PageInfo }
const { description } = info

const paragraphs = description.trim().split("\n").map(p => {
	const parts = p.split(":")
	if (parts.length === 1) return { panel: null, description: parts[0] }
	if (!parts[0].toLowerCase().includes("panel"))
		return { panel: null, description: parts.join(":") }
	return { panel: parts[0], description: parts.splice(1).join(":") }
})

const TRANSCRIPT_CONTENT_ID = `${ID.TRANSCRIPT}__body`
---
<section id={ID.TRANSCRIPT} class="transcript">
	<h2>{t("transcript.title")}</h2>
	<button
		aria-controls={TRANSCRIPT_CONTENT_ID}
		aria-expanded="false"
		aria-label={t("transcript.button.expanded-false")}
		data-label--expanded-false={t("transcript.button.expanded-false")}
		data-label--expanded-true={t("transcript.button.expanded-true")}
	></button>
	<div id={TRANSCRIPT_CONTENT_ID} class="transcript__content" aria-hidden="true">
		{paragraphs.map(({ panel, description }) =>
			<p>
				{panel && <strong>{panel}:</strong>}
				{description || t("transcript.no-description")}
			</p>
		)}
	</div>
</section>
<script define:vars={{ section_id: ID.TRANSCRIPT, content_id: TRANSCRIPT_CONTENT_ID }}>
	const section = document.getElementById(section_id)
	const body = document.getElementById(content_id)
	const button = section.querySelector("button")

	button.addEventListener("click", () => {
		if (button.getAttribute("aria-expanded") === "false") {
			body.setAttribute("aria-hidden", "false")
			button.setAttribute("aria-expanded", "true")
			button.setAttribute("aria-label", button.getAttribute("data-label--expanded-true"))
		} else {
			body.setAttribute("aria-hidden", "true")
			button.setAttribute("aria-expanded", "false")
			button.setAttribute("aria-label", button.getAttribute("data-label--expanded-false"))
		}
	})
</script>
<style>
    .transcript {
        grid-column: full-width;
        grid-row: transcript;

        background-color: white;
        border-radius: var(--component_border-radius);
        border: var(--section_border);

        padding: var(--section_padding);
    }

    .transcript__content {
        overflow: hidden;
        line-height: 1.5em;
        transition: height 150ms;
    }

    .transcript__content[aria-hidden=true] {
        mask-image: linear-gradient(to bottom, black 0%, transparent);
        height: 6em;
    }

    strong {
        font-weight: 600;
    }

    section {
        position: relative;
    }

    button {
        position: absolute;
        inset: 0;
        z-index: 1;
    }

    button[aria-expanded=true] {
        pointer-events: none;
    }
</style>
