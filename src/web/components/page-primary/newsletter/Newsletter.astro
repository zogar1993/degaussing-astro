---
import { getLangFromUrl, useTranslations } from "@server/i18n/utils"
import type { PageInfo } from "@server/GetPageInfo"

const language = getLangFromUrl(Astro.url)
const t = useTranslations(language)

const { info } = Astro.props as { info: PageInfo }

const NEWSLETTER_URL = {
	es: "https://assets.mailerlite.com/jsonp/989761/forms/124424779064149866/subscribe",
	en: "https://assets.mailerlite.com/jsonp/989761/forms/124338419743590345/subscribe"
} as const
---
<aside aria-label={t("landmarks.newsletter")} id="newsletter" data-state="idle">
	<h2>{t("newsletter.title")}</h2>
	<p class="visible-when-not-server-confirmed">{t("newsletter.description")}</p>
	<form
		id="newsletter-form"
		class="visible-when-not-server-confirmed"
		action={NEWSLETTER_URL[language]}
		data-code=""
		method="post"
		target="_blank"
	>
		<input id="newsletter-input" type="email" name="fields[email]" placeholder="Email" autocomplete="email" />
		<input type="hidden" name="ml-submit" value="1" />
		<button
			id="newsletter-button"
			class="g-recaptcha"
			data-sitekey="6LeccXQqAAAAAPGs9dstzJZHDENS23T504768yvk"
			data-callback="onNewsletterSubscription"
			disabled="disabled"
		>
			<span class="visible-when-idle">{t("newsletter.subscribe")}</span>
			<span class="visible-when-waiting-server-confirmation">{t("newsletter.subscribing")}</span>
		</button>
		<input type="hidden" name="anticsrf" value="true">
	</form>
	<p class="visible-when-success">{t("newsletter.success")}</p>
	<p class="visible-when-error">{t("newsletter.error")}</p>
</aside>
<style>
    aside {
        grid-column: full-width;
        grid-row: newsletter;

        background-color: var(--section_background-color);
        border-radius: var(--component_border-radius);
        border: var(--section_border);

        padding: var(--section_padding);
    }

    form {
        display: flex;
    }

    button {
        font-size: 1rem;
        color: var(--button_border-color);
        background-color: var(--button_background-color);
        border: 1px solid var(--button_border-color);
        padding: 0.5rem 0.75rem;
        border-radius: var(--component_border-radius);
    }

    button:not([disabled]):hover {
        background-color: var(--button--hover_background-color);
    }

    button[disabled] {
        background-color: #e0ae4fbb;
        border-color: transparent;
        color: #B1A3A3;
    }

    input[type=email] {
        font-size: 1rem;
        padding: 0.5rem 0.75rem;
        border-radius: var(--component_border-radius);
        border: 1px solid var(--button_border-color);
        margin-right: var(--buttons_gap);
    }

    aside[data-state=waiting-server-confirmation] button {
        cursor: wait;
    }

    aside[data-state]:not(aside[data-state=idle]) .visible-when-idle {
        display: none;
    }

    aside[data-state]:not(aside[data-state=waiting-server-confirmation]) .visible-when-waiting-server-confirmation {
        display: none;
    }

    aside[data-state]:not(aside[data-state=success]) .visible-when-success {
        display: none;
    }

    aside[data-state]:not(aside[data-state=error]) .visible-when-error {
        display: none;
    }

    :is(aside[data-state=success], aside[data-state=error]) .visible-when-not-server-confirmed {
        display: none;
    }

    @media (max-width: 72em) {
        h2 {
            font-size: 1.5rem;
        }
    }
</style>
