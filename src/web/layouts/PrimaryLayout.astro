---
import MainLayout from "@web/layouts/MainLayout.astro"
import StripAside from "@web/components/page-primary/aside/StripAside.astro"
import StickyNavBar from "@web/components/StickyNavBar.astro"
import ComicStrip from "@web/components/ComicStrip.astro"
import Transcript from "@web/components/Transcript.astro"
import Comments from "@web/components/page-primary/comments/Comments.astro"
import getLocalizedLinkToComicStrip from "@server/actions/GetLocalizedLinkToComicStrip"
import type { PageInfo } from "@server/GetPageInfo"

export interface Props {
	info: PageInfo
	title: string
}
const { info, title } = Astro.props

const { backward, forward } = info
const previous = backward ? getLocalizedLinkToComicStrip(backward.one) : null
const next = forward ? getLocalizedLinkToComicStrip(forward.one) : null
---
<MainLayout info={info} title={title}>
	<div class="grid">
		<ComicStrip info={info} />
		<StickyNavBar info={info} />
		{info.description && //TODO this should be mandatory

			<Transcript info={info} />}
		<StripAside info={info} />
		<Comments info={info} />
	</div>
</MainLayout>
<script define:vars={{ previous, next }}>
	//const handleOnKeyDown = (e) => {
	//    switch (e.key) {
	//        case "ArrowLeft":
	//            if (previous) {
	//                window.location.href = previous
	//                e.preventDefault()
	//            }
	//            break
	//        case "ArrowRight":
	//            if (next) {
	//                window.location.href = next
	//                e.preventDefault()
	//            }
	//            break
	//    }
	//}

	//document.body.addEventListener("keydown", handleOnKeyDown)
	//TODO check if we can keep this while screen readers are in order too

	const main = document.querySelector("main")
	const MOVE_THRESHOLD = 100

	let initialX = 0
	let initialY = 0
	let initialScrollPosition = 0

	main.addEventListener("touchstart", e => {
		const touch = e.touches[0]
		initialX = touch.pageX
		initialY = touch.pageY
		initialScrollPosition = document.documentElement.scrollTop
	})

	main.addEventListener("touchend", e => {
		const touch = e.changedTouches[0]
		const xDisplacement = touch.pageX - initialX
		const scrollDisplacement = document.documentElement.scrollTop - initialScrollPosition
		const yDisplacement = touch.pageY - initialY + scrollDisplacement

		//Non horizontal swipes are ignored
		if (Math.abs(yDisplacement) > MOVE_THRESHOLD) return

		if (xDisplacement < -MOVE_THRESHOLD && next) {
			window.location.href = next
		} else if (xDisplacement > MOVE_THRESHOLD && previous) {
			window.location.href = previous
		}
	})
</script>
<style>
    .grid {
        --donations__button_size: 4.5rem;
        --aside__section_padding: 1.5rem;
        /* using donations section as a proxy to calculate aside width */
        --aside--desktop_width: calc(
                var(--border-wide-width) * 2 +
                var(--aside__section_padding) * 2 +
                var(--donations__button_size) * 2 +
                var(--buttons_gap)
        );

        --section--mobile_padding: 1rem;

        display: grid;

        grid-template-columns: var(--strip-width) var(--aside--desktop_width);
        grid-template-rows: auto 1fr auto;
        grid-template-areas:
            "main strip-aside"
            "transcript transcript"
            "sticky-bar ."
            "comments comments";
        gap: 1.25rem;
    }

    @media (max-width: 72em) {
        .grid {
            grid-template-columns: fit-content(var(--strip-width));
            grid-template-areas:
                "main"
                "transcript"
                "sticky-bar"
                "strip-aside"
                "comments";
        }
    }
</style>
