---
import { getImage } from "astro:assets"
import MainLayout from "@web/layouts/MainLayout.astro"
import StripAside from "@web/components/page-primary/aside/StripAside.astro"
import StickyNavBar from "@web/components/StickyNavBar.astro"
import Comments from "@web/components/page-primary/comments/Comments.astro"
import PrimaryPageMain from "@web/components/page-primary/main/PagePrimaryMain.astro"
import getLocalizedLinkToComicStrip from "@server/actions/GetLocalizedLinkToComicStrip"
import { getLangFromUrl } from "@server/i18n/utils"
import type { PageInfo } from "@server/GetPageInfo"

const { info, title } = Astro.props as { info: PageInfo; title: string }
const language = getLangFromUrl(Astro.url)

info.image = (await getImage({ src: info.image, width: 864, height: 1222, format: "webp", quality: "max" })).src

const { backward, forward } = info
const previous = backward ? getLocalizedLinkToComicStrip({ ...backward.one, language }) : null
const next = forward ? getLocalizedLinkToComicStrip({ ...forward.one, language }) : null
---
<MainLayout info={info} title={title}>
	<div class="grid">
		<PrimaryPageMain info={info} />
		<StickyNavBar info={info} />
		<StripAside info={info} />
		<Comments info={info} />
	</div>
</MainLayout>
<script define:vars={{ previous, next }}>
	const handleOnKeyDown = (e) => {
		// We only care about the character when pressed alone
		if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) return

		const navigateTo = (path) => {
			if (!path) return
			window.location.href = path
			e.preventDefault()
		}

		if (["k", "K", "ArrowLeft"].includes(e.key))
			navigateTo(previous)
		else if (["j", "J", "ArrowRight"].includes(e.key))
			navigateTo(next)
	}

	document.body.addEventListener("keydown", handleOnKeyDown)

	const main = document.querySelector("main")
	const MOVE_THRESHOLD = 100

	let initialX = 0
	let initialY = 0
	let initialScrollPosition = 0

	main.addEventListener("touchstart", e => {
		const touch = e.touches[0]
		initialX = touch.pageX
		initialY = touch.pageY
		initialScrollPosition = document.documentElement.scrollTop
	}, { passive: true })

	main.addEventListener("touchend", e => {
		const touch = e.changedTouches[0]
		const xDisplacement = touch.pageX - initialX
		const scrollDisplacement = document.documentElement.scrollTop - initialScrollPosition
		const yDisplacement = touch.pageY - initialY + scrollDisplacement

		//Non horizontal swipes are ignored
		if (Math.abs(yDisplacement) > MOVE_THRESHOLD) return

		if (xDisplacement < -MOVE_THRESHOLD && next) {
			window.location.href = next
		} else if (xDisplacement > MOVE_THRESHOLD && previous) {
			window.location.href = previous
		}
	}, { passive: true })
</script>
<style>
    .grid {
        --donations__button_size: 4.5rem;
        --aside__section_padding: 1.5rem;
        /* using donations section as a proxy to calculate aside width */
        --aside--desktop_width: calc(
                var(--border-wide-width) * 2 +
                var(--aside__section_padding) * 2 +
                var(--donations__button_size) * 2 +
                var(--buttons_gap)
        );

        --section--mobile_padding: 1rem;

        display: grid;

        grid-template-columns:
        	[full-width-start left-start] var(--strip_width)
        	[left-end right-start] var(--aside--desktop_width)
        	[right-end full-width-end];

        grid-template-rows:
        	[main-start strip-start aside-start] auto
        	[strip-end aside-end transcript-start] auto
        	[transcript-end main-end sticky-nav-bar-start] auto
        	[sticky-nav-bar-end comments-start] auto
        	[comments-end];

        gap: 1.25rem;
    }

    @media (max-width: 72em) {
        .grid {
            grid-template-columns:
							[full-width-start left-start right-start]
							auto
							[full-width-end left-end right-end];
            grid-template-rows:
							[main-start strip-start] auto
							[strip-end transcript-start] auto
							[transcript-end main-end sticky-nav-bar-start] auto
							[sticky-nav-bar-end aside-start] auto
							[aside-end comments-start] auto
							[comments-end];
        }
    }
</style>
