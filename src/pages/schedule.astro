---
import contentful from "contentful"
import FontsCss from "@web/styles/FontsCss.astro"
import ResetCss from "@web/styles/ResetCss.astro"
import VariablesCss from "@web/styles/VariablesCss.astro"

const clientPreview = contentful.createClient({
	space: import.meta.env.CONTENTFUL_SPACE_ID!,
	accessToken: import.meta.env.CONTENTFUL_ACCESS_TOKEN_PREVIEW!,
	host: "preview.contentful.com"
})

const clientDelivery = contentful.createClient({
	space: import.meta.env.CONTENTFUL_SPACE_ID!,
	accessToken: import.meta.env.CONTENTFUL_ACCESS_TOKEN_DELIVERY!,
	host: "cdn.contentful.com"
})

async function fetchPreviewChapters(language?: string): Promise<any> {
	const locale = language === "en" ? "en-US" : language

	//These are the max values for both limit and include at the time
	const response = await clientPreview.getEntries({
		content_type: "list",
		limit: 1000,
		include: 10,
		locale: locale
	})
	const chapters = response.items.find(entry => entry.fields.name === "chapters")
	return (chapters.fields.items as any[]).flatMap(item =>
		[...(item.fields.cover ? [item.fields.cover] : []), ...(item.fields.pages ?? [])]
	).reverse()
}

async function fetchDeliveryChapters(): Promise<any> {
	//These are the max values for both limit and include at the time
	const response = await clientDelivery.getEntries({
		content_type: "list",
		limit: 1000,
		include: 10,
		locale: "en-US"
	})
	const chapters = response.items.find(entry => entry.fields.name === "chapters")
	return (chapters.fields.items as any[]).map(item => item.fields.name)
}

const entries_EN = await fetchPreviewChapters("en")
const entries_ES = await fetchPreviewChapters("es")
const published_chapter_numbers = (await fetchDeliveryChapters()).map(chapter => chapter.split(" ")[1])

function getEntryStatus(sys) {
	const { publishedVersion, revision, updatedAt, publishedAt } = sys

	if (!publishedVersion) return "draft"
	if (publishedVersion < revision) return ""
	if (new Date(updatedAt) > new Date(publishedAt)) return "changed"
	return "published"
}

type Day = {
	date?: Date
	date_string?: string
	pages: Array<Page>
	is_first_future_date?: boolean
}

type Page = {
	name: string
	status: string
	transcribed_english: boolean
	transcribed_spanish: boolean
	author_comment?: { en: boolean, es: boolean }
}

const days: Array<Day> = []

for (let i = 0; i < entries_EN.length; i++) {
	const { sys, fields: fields_EN } = entries_EN[i]
	const { fields: fields_ES } = entries_ES[i]

	const day = days.find(day => day.date_string === fields_EN.createdAt)

	const english_author_comment = !!fields_EN.author_comment_lucia
	const spanish_author_comment =
		(!!fields_ES.author_comment_lucia && !english_author_comment) ||
		//This is so because english is default language so spanish is never empty when english is present
		(english_author_comment && JSON.stringify(fields_EN.author_comment_lucia) !== JSON.stringify(fields_ES.author_comment_lucia))

	const status = getEntryStatus(sys)
	const is_chapter_list_published = fields_EN.name ? published_chapter_numbers.includes(fields_EN.name.split(" ")[0]) : false

	const page = {
		name: fields_EN.name,
		status: status !== "published" ? status : is_chapter_list_published ? status : "unpublished-list",
		transcribed_english: typeof fields_EN.description === "string" && fields_EN.description !== "",
		transcribed_spanish:
			typeof fields_ES.description === "string" &&
			fields_ES.description !== "" &&
			//This is so because english is default language so spanish is never empty when english is present
			fields_ES.description !== fields_EN.description,
		author_comment: { en: english_author_comment, es: spanish_author_comment }
	}

	if (day)
		day.pages.push(page)
	else
		days.push({
			date_string: fields_EN.createdAt,
			date: fields_EN.createdAt && new Date(fields_EN.createdAt),
			pages: [page]
		})
}
const now = new Date()
const futureDays = days.filter(item => item.date > now) // Filter for future dates
	.sort((a, b) => a.date.getTime() - b.date.getTime())

if (futureDays.length > 0)
	futureDays[0].is_first_future_date = true
---
<!DOCTYPE html>
<html lang="en">
<head>
	<title>Schedule</title>
	<link rel="icon" href="/favicon.ico" />
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<FontsCss />
	<ResetCss />
	<VariablesCss />
</head>
<body>
<ol>
	{days.map(day =>
		<li
			class={
				(day.is_first_future_date ? "first-future-date " : "") +
				(day.pages.some(page =>
						!page.transcribed_english ||
						!page.transcribed_spanish ||
						page.status === "draft" ||
						page.status === "unpublished-list" ||
						page.author_comment.es !== page.author_comment.en
					) ? "date-has-errors " :
						(day.pages.some(page =>
							page.status === "changed"
						)) ? "date-is-unpublished " : ""
				)

			}>
			<h2>{day.date_string || "undated"}</h2>
			{day.pages.map(page =>
				<div>
					<h3>{page.name}</h3>
					<div class="day-content">
						<div class="status" data-status={page.status} title={page.status}></div>
						<div class="content-container">
							<div>Transcriptions</div>
							<div class="flag" data-missing={String(!page.transcribed_spanish)}>
								<div class="stripe light-blue"></div>
								<div class="stripe white">
									<div class="sun"></div>
								</div>
								<div class="stripe light-blue"></div>
							</div>
							<div class="uk-flag" data-missing={String(!page.transcribed_english)}>
								<div class="background"></div>
								<div class="white-diagonal top-left"></div>
								<div class="white-diagonal top-right"></div>
								<div class="red-diagonal top-left"></div>
								<div class="red-diagonal top-right"></div>
								<div class="white-cross horizontal"></div>
								<div class="white-cross vertical"></div>
								<div class="red-cross horizontal"></div>
								<div class="red-cross vertical"></div>
							</div>
							{(page.author_comment.en || page.author_comment.es) &&
								<div>
									Author
								</div>
									<div class="flag" data-missing={String(!page.author_comment.es)}>
										<div class="stripe light-blue"></div>
										<div class="stripe white">
											<div class="sun"></div>
										</div>
										<div class="stripe light-blue"></div>
									</div>
									<div class="uk-flag" data-missing={String(!page.author_comment.en)}>
										<div class="white-diagonal top-left"></div>
										<div class="white-diagonal top-right"></div>
										<div class="red-diagonal top-left"></div>
										<div class="red-diagonal top-right"></div>
										<div class="white-cross horizontal"></div>
										<div class="white-cross vertical"></div>
										<div class="red-cross horizontal"></div>
										<div class="red-cross vertical"></div>
									</div>
							}
						</div>
					</div>
				</div>
			)}
		</li>
	)}
</ol>
</body>
</html>
<style>
    body {
        display: flex;
        flex-direction: column;
        align-items: center;

        background-image: url("/images/background_body.webp");
        user-select: none;
    }

    ol {
        --items_spacing: 1rem;
        padding: var(--items_spacing);
        background-color: var(--color--blue);

        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: var(--items_spacing);
    }

    li {
        padding: var(--items_spacing);
        background-color: var(--color--white);
        border: var(--component_border);
        border-radius: var(--component_border-radius);
    }

    .status {
        height: 24px;
        aspect-ratio: 1;
        border: 1px solid black;
        border-radius: 50%;
    }

    .status[data-status=published] {
        background: lightgreen;
    }

    .status[data-status=changed] {
        background: deepskyblue;
    }

    .status[data-status=draft] {
        background: yellow;
    }

    .status[data-status=unpublished-list] {
        background: darkorange;
    }

    .content-container {
        display: grid;
        grid-template-columns: 1fr 20px 20px;
        gap: 0.5rem;
        margin-left: 1rem;
    }


    h3 {
        font-family: var(--text_font-family);
        color: black;
        margin-bottom: 0.25rem;
        margin-top: 0.5rem;
        font-size: 20px;
    }

    .day-content {
        display: flex;
        align-items: center;
    }

    .first-future-date {
        outline: orange 8px solid;
        outline-offset: -4px;
    }

    .date-has-errors {
        background-color: lightpink;
    }

    .date-is-unpublished {
        background-color: lightblue;
    }

    .flag[data-missing=true] {
        filter: grayscale(100%);
    }

    .uk-flag[data-missing=true] {
        filter: grayscale(100%);
    }

    .flag {
        width: 20px;
        height: 20px;
        border: 1px solid #000;
        position: relative;
    }

    .stripe {
        height: 33.33%;
        width: 100%;
    }

    .light-blue {
        background-color: #74ACDF;
    }

    .white {
        background-color: #FFFFFF;
    }

    .sun {
        height: 30%;
        aspect-ratio: 1;
        background-color: #FFD700;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        border-radius: 50%;
    }


    .uk-flag {
        position: relative;
        width: 20px;
        height: 20px;
        background-color: #00247D; /* Dark blue */
        border: 1px solid #000;
        overflow: hidden;
    }

    /* Horizontal and Vertical Crosses */
    .white-cross {
        position: absolute;
        background-color: #FFFFFF;
    }

    .white-cross.horizontal {
        width: 100%;
        height: 20%;
        top: 50%;
        transform: translateY(-50%);
    }

    .white-cross.vertical {
        width: 20%;
        height: 100%;
        left: 50%;
        transform: translateX(-50%);
    }

    .red-cross {
        position: absolute;
        background-color: #CF142B;
    }

    .red-cross.horizontal {
        width: 100%;
        height: calc(100% / 15 * 1.5);
        top: 50%;
        transform: translateY(-50%);
    }

    .red-cross.vertical {
        width: calc(100% / 15 * 1.5);
        height: 100%;
        left: 50%;
        transform: translateX(-50%);
    }

    /* Diagonal Stripes */
    .white-diagonal {
        position: absolute;
        width: 150%;
        height: calc(100% / 15 * 2);
        background-color: #FFFFFF;
        transform-origin: center center;
    }

    .white-diagonal.top-left {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) rotate(-45deg);
    }

    .white-diagonal.top-right {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) rotate(45deg);
    }

    .red-diagonal {
        position: absolute;
        width: 150%;
        height: calc(100% / 15);
        background-color: #CF142B;
        transform-origin: center center;
        z-index: 1;
    }

    .red-diagonal.top-left {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) rotate(-45deg);
    }

    .red-diagonal.top-right {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) rotate(45deg);
    }
</style>
