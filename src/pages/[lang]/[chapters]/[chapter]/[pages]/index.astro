---
import { Image } from "astro:assets"
import SecondaryLayout from "@web/layouts/SecondaryLayout.astro"
import Section from "@web/components/page-secondary/SecondaryPageSection.astro"
import SectionHeading from "@web/components/general/SectionHeading.astro"
import getLocalizedLinkToComicStrip from "@server/actions/GetLocalizedLinkToComicStrip"
import getLocalizedChapter from "@server/localization/GetLocalizedChapter"
import getLocalizedPage from "@server/localization/GetLocalizedPage"
import { getLangFromUrl, useTranslations, useLocalizePath, LANGUAGE_CODES } from "@server/i18n/utils"
import { getChapters } from "@server/GetChapters"

export async function getStaticPaths() {
	return (await Promise.all(LANGUAGE_CODES.map(async (language) => {
		const chapters = await getChapters({ language })
		return chapters.flatMap(chapter => {
			return {
				props: {
					chapter: chapter.number,
					pages: chapter.pages
				},
				params: {
					lang: `${language}`,
					chapters: useTranslations(language)("url.chapters"),
					chapter: `${chapter.number}`,
					pages: useTranslations(language)("url.pages"),
				}
			}
		})
	}))).flatMap(x => x)
}

const language = getLangFromUrl(Astro.url)
const t = useTranslations(language)
const localizePath = useLocalizePath(language)

const { chapter, pages } = Astro.props as Awaited<ReturnType<typeof getStaticPaths>>[0]["props"]
const chapter_localized = getLocalizedChapter(chapter, language)
---
<SecondaryLayout title={chapter_localized}>
	<Section>
		<a class="back" href={localizePath(`/${t("url.chapters")}`)}>{`<- ${t("secondary-nav.back")}`}</a>
		<SectionHeading>{chapter_localized}</SectionHeading>
		<ol>
			{
				pages.map(({ image, number }) => (
					<li>
						<a class="image-link" href={getLocalizedLinkToComicStrip({ chapter, page: number, language })}>
							<Image src={image} alt="" width={282} height={399} />
							<span>{getLocalizedPage(number, language)}</span>
						</a>
					</li>
				))
			}
		</ol>
	</Section>
</SecondaryLayout>
<style>
    .image-link {
        position: relative;
        display: flex;
        flex-direction: column;
        isolation: isolate;
        transition: var(--link--hover_transition-timing);
        transition-property: transform;
    }

    ol:has(.image-link:hover) .image-link:not(:hover) {
        transform: scale(0.95);
    }

    .image-link:hover {
        transform: scale(1.05);
    }

    ol {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(12rem, 1fr));
        gap: 1.5rem;
        margin-bottom: 0.5rem;
    }

    img {
        width: 100%;
        height: auto;
        aspect-ratio: var(--strip_aspect-ratio);
        border-radius: var(--component_border-radius);
    }

    span {
        margin-top: 0.5rem;
        color: var(--text_color);
        font-size: .875rem;
        user-select: none;
        text-align: center;
    }

    .back {
        display: inline-block;
        margin-bottom: 1rem;
        color: var(--text_color);
        transition: var(--link--hover_transition-timing);
        transition-property: transform;
    }

    .back:hover {
        transform: scale(1.1);
    }
</style>
